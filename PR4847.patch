From 32f798fef6513c98baa5d541afa7155b0e2ccdce Mon Sep 17 00:00:00 2001
From: Xavier Leroy <xavier.leroy@inria.fr>
Date: Wed, 23 Sep 2009 14:31:18 +0000
Subject: [PATCH] PR#4847: for ocamlc -output-obj and ocamlc -custom, generate
 cleaner C code for the table of primitives: use #include <caml/mlvalues.h>
 instead of hard-coding "mlvalue = long", since the latter doesn't hold for
 Win64.

git-svn-id: http://caml.inria.fr/svn/ocaml/version/3.11@9347 f963ae5c-01c2-4b8c-9fe0-0dff7051ff02
---
 bytecomp/bytelink.ml | 27 +++++++++++++++++++++++----
 bytecomp/symtable.ml | 14 +++-----------
 2 files changed, 26 insertions(+), 15 deletions(-)

diff --git a/bytecomp/bytelink.ml b/bytecomp/bytelink.ml
index 6ff3700..61549ae 100644
--- a/bytecomp/bytelink.ml
+++ b/bytecomp/bytelink.ml
@@ -406,8 +406,11 @@ let link_bytecode_as_c tolink outfile =
   let outchan = open_out outfile in
   begin try
     (* The bytecode *)
-    output_string outchan "#include <caml/mlvalues.h>\n";
     output_string outchan "\
+#ifdef __cplusplus
+extern \"C\" {
+#endif
+#include <caml/mlvalues.h>
 CAMLextern void caml_startup_code(
            code_t code, asize_t code_size,
            char *data, asize_t data_size,
@@ -441,14 +444,17 @@ CAMLextern void caml_startup_code(
     (* The table of primitives *)
     Symtable.output_primitive_table outchan;
     (* The entry point *)
-    output_string outchan "\n
+    output_string outchan "\n\
 void caml_startup(char ** argv)
 {
   caml_startup_code(caml_code, sizeof(caml_code),
                     caml_data, sizeof(caml_data),
                     caml_sections, sizeof(caml_sections),
                     argv);
-}\n";
+}
+#ifdef __cplusplus
+}
+#endif\n";
     close_out outchan
   with x ->
     close_out outchan;
@@ -462,7 +468,7 @@ void caml_startup(char ** argv)
 let build_custom_runtime prim_name exec_name =
   Ccomp.call_linker Ccomp.Exe exec_name 
     ([prim_name] @ List.rev !Clflags.ccobjs @ ["-lcamlrun"])
-    Config.bytecomp_c_libraries
+    (Clflags.std_include_flag "-I" ^ " " ^ Config.bytecomp_c_libraries)
 
 let append_bytecode_and_cleanup bytecode_name exec_name prim_name =
   let oc = open_out_gen [Open_wronly; Open_append; Open_binary] 0 exec_name in
@@ -501,7 +507,20 @@ let link objfiles output_name =
     try
       link_bytecode tolink bytecode_name false;
       let poc = open_out prim_name in
+      output_string poc "\
+        #ifdef __cplusplus\n\
+        extern \"C\" {\n\
+        #endif\n\
+        #ifdef _WIN64\n\
+        typedef __int64 value;\n\
+        #else\n\
+        typedef long value;\n\
+        #endif\n";
       Symtable.output_primitive_table poc;
+      output_string poc "\
+        #ifdef __cplusplus\n\
+        }\n\
+        #endif\n";
       close_out poc;
       let exec_name = fix_exec_name output_name in
       if not (build_custom_runtime prim_name exec_name)
diff --git a/bytecomp/symtable.ml b/bytecomp/symtable.ml
index 1538451..bad39a2 100644
--- a/bytecomp/symtable.ml
+++ b/bytecomp/symtable.ml
@@ -114,14 +114,10 @@ open Printf
 
 let output_primitive_table outchan =
   let prim = all_primitives() in
-  fprintf outchan "\
-    #ifdef __cplusplus\n\
-    extern \"C\" {\n\
-    #endif\n";
   for i = 0 to Array.length prim - 1 do
-    fprintf outchan "extern long %s();\n" prim.(i)
+    fprintf outchan "extern value %s();\n" prim.(i)
   done;
-  fprintf outchan "typedef long (*primitive)();\n";
+  fprintf outchan "typedef value (*primitive)();\n";
   fprintf outchan "primitive caml_builtin_cprim[] = {\n";
   for i = 0 to Array.length prim - 1 do
     fprintf outchan "  %s,\n" prim.(i)
@@ -131,11 +127,7 @@ let output_primitive_table outchan =
   for i = 0 to Array.length prim - 1 do
     fprintf outchan "  \"%s\",\n" prim.(i)
   done;
-  fprintf outchan "  (char *) 0 };\n";
-  fprintf outchan "\
-    #ifdef __cplusplus\n\
-    }\n\
-    #endif\n"
+  fprintf outchan "  (char *) 0 };\n"
 
 (* Initialization for batch linking *)
 
-- 
2.8.3.windows.1

diff -Naur a/patches/mpr#4847.patched b/patches/mpr#4847.patched
--- a/patches/mpr#4847.patched	1970-01-01 01:00:00.000000000 +0100
+++ b/patches/mpr#4847.patched	2016-07-05 13:54:02.412191200 +0100
@@ -0,0 +1 @@
+Applied
